import {
  capitalize,
  init_capitalize
} from "./chunk-7TZQIG42.js";
import {
  _objectWithoutProperties,
  chainPropTypes,
  init_esm,
  init_objectWithoutProperties,
  init_withStyles,
  withStyles_default
} from "./chunk-MS7CFHYK.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-GTQNZXPE.js";
import {
  require_prop_types
} from "./chunk-MZYBN553.js";
import {
  _extends,
  init_extends
} from "./chunk-5VDURD5Q.js";
import {
  require_react
} from "./chunk-OU2QLVNP.js";
import {
  __esm,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@material-ui/core/esm/utils/debounce.js
function debounce(func) {
  var wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 166;
  var timeout;
  function debounced() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var that = this;
    var later = function later2() {
      func.apply(that, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }
  debounced.clear = function() {
    clearTimeout(timeout);
  };
  return debounced;
}
var init_debounce = __esm({
  "node_modules/@material-ui/core/esm/utils/debounce.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/isMuiElement.js
function isMuiElement(element, muiNames) {
  return React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
}
var React;
var init_isMuiElement = __esm({
  "node_modules/@material-ui/core/esm/utils/isMuiElement.js"() {
    React = __toESM(require_react());
  }
});

// node_modules/@material-ui/core/esm/utils/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}
var init_ownerDocument = __esm({
  "node_modules/@material-ui/core/esm/utils/ownerDocument.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/ownerWindow.js
function ownerWindow(node) {
  var doc = ownerDocument(node);
  return doc.defaultView || window;
}
var init_ownerWindow = __esm({
  "node_modules/@material-ui/core/esm/utils/ownerWindow.js"() {
    init_ownerDocument();
  }
});

// node_modules/@material-ui/core/esm/utils/createChainedFunction.js
function createChainedFunction() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  return funcs.reduce(function(acc, func) {
    if (func == null) {
      return acc;
    }
    if (true) {
      if (typeof func !== "function") {
        console.error("Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.");
      }
    }
    return function chainedFunction() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      acc.apply(this, args);
      func.apply(this, args);
    };
  }, function() {
  });
}
var init_createChainedFunction = __esm({
  "node_modules/@material-ui/core/esm/utils/createChainedFunction.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/useControlled.js
function useControlled(_ref) {
  var controlled = _ref.controlled, defaultProp = _ref.default, name = _ref.name, _ref$state = _ref.state, state = _ref$state === void 0 ? "value" : _ref$state;
  var _React$useRef = React2.useRef(controlled !== void 0), isControlled = _React$useRef.current;
  var _React$useState = React2.useState(defaultProp), valueState = _React$useState[0], setValue = _React$useState[1];
  var value = isControlled ? controlled : valueState;
  if (true) {
    React2.useEffect(function() {
      if (isControlled !== (controlled !== void 0)) {
        console.error(["Material-UI: A component is changing the ".concat(isControlled ? "" : "un", "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? "un" : "", "controlled."), "Elements should not switch from uncontrolled to controlled (or vice versa).", "Decide between using a controlled or uncontrolled ".concat(name, " ") + "element for the lifetime of the component.", "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
      }
    }, [controlled]);
    var _React$useRef2 = React2.useRef(defaultProp), defaultValue = _React$useRef2.current;
    React2.useEffect(function() {
      if (!isControlled && defaultValue !== defaultProp) {
        console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join("\n"));
      }
    }, [JSON.stringify(defaultProp)]);
  }
  var setValueIfUncontrolled = React2.useCallback(function(newValue) {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}
var React2;
var init_useControlled = __esm({
  "node_modules/@material-ui/core/esm/utils/useControlled.js"() {
    React2 = __toESM(require_react());
  }
});

// node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js
var React3, import_prop_types, styles, SvgIcon, SvgIcon_default;
var init_SvgIcon = __esm({
  "node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js"() {
    init_extends();
    init_objectWithoutProperties();
    React3 = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_esm();
    init_withStyles();
    init_capitalize();
    styles = function styles2(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          userSelect: "none",
          width: "1em",
          height: "1em",
          display: "inline-block",
          fill: "currentColor",
          flexShrink: 0,
          fontSize: theme.typography.pxToRem(24),
          transition: theme.transitions.create("fill", {
            duration: theme.transitions.duration.shorter
          })
        },
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },
        /* Styles applied to the root element if `color="action"`. */
        colorAction: {
          color: theme.palette.action.active
        },
        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },
        /* Styles applied to the root element if `color="disabled"`. */
        colorDisabled: {
          color: theme.palette.action.disabled
        },
        /* Styles applied to the root element if `fontSize="inherit"`. */
        fontSizeInherit: {
          fontSize: "inherit"
        },
        /* Styles applied to the root element if `fontSize="small"`. */
        fontSizeSmall: {
          fontSize: theme.typography.pxToRem(20)
        },
        /* Styles applied to the root element if `fontSize="large"`. */
        fontSizeLarge: {
          fontSize: theme.typography.pxToRem(35)
        }
      };
    };
    SvgIcon = React3.forwardRef(function SvgIcon2(props, ref) {
      var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component = _props$component === void 0 ? "svg" : _props$component, _props$fontSize = props.fontSize, fontSize = _props$fontSize === void 0 ? "medium" : _props$fontSize, htmlColor = props.htmlColor, titleAccess = props.titleAccess, _props$viewBox = props.viewBox, viewBox = _props$viewBox === void 0 ? "0 0 24 24" : _props$viewBox, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);
      return React3.createElement(Component, _extends({
        className: clsx_m_default(classes.root, className, color !== "inherit" && classes["color".concat(capitalize(color))], fontSize !== "default" && fontSize !== "medium" && classes["fontSize".concat(capitalize(fontSize))]),
        focusable: "false",
        viewBox,
        color: htmlColor,
        "aria-hidden": titleAccess ? void 0 : true,
        role: titleAccess ? "img" : void 0,
        ref
      }, other), children, titleAccess ? React3.createElement("title", null, titleAccess) : null);
    });
    true ? SvgIcon.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Node passed into the SVG element.
       */
      children: import_prop_types.default.node,
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: import_prop_types.default.object,
      /**
       * @ignore
       */
      className: import_prop_types.default.string,
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
       */
      color: import_prop_types.default.oneOf(["action", "disabled", "error", "inherit", "primary", "secondary"]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types.default.elementType,
      /**
       * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
       */
      fontSize: chainPropTypes(import_prop_types.default.oneOf(["default", "inherit", "large", "medium", "small"]), function(props) {
        var fontSize = props.fontSize;
        if (fontSize === "default") {
          throw new Error('Material-UI: `fontSize="default"` is deprecated. Use `fontSize="medium"` instead.');
        }
        return null;
      }),
      /**
       * Applies a color attribute to the SVG element.
       */
      htmlColor: import_prop_types.default.string,
      /**
       * The shape-rendering attribute. The behavior of the different options is described on the
       * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
       * If you are having issues with blurry icons you should investigate this property.
       */
      shapeRendering: import_prop_types.default.string,
      /**
       * Provides a human-readable title for the element that contains it.
       * https://www.w3.org/TR/SVG-access/#Equivalent
       */
      titleAccess: import_prop_types.default.string,
      /**
       * Allows you to redefine what the coordinates without units mean inside an SVG element.
       * For example, if the SVG element is 500 (width) by 200 (height),
       * and you pass viewBox="0 0 50 20",
       * this means that the coordinates inside the SVG will go from the top left corner (0,0)
       * to bottom right (50,20) and each unit will be worth 10px.
       */
      viewBox: import_prop_types.default.string
    } : void 0;
    SvgIcon.muiName = "SvgIcon";
    SvgIcon_default = withStyles_default(styles, {
      name: "MuiSvgIcon"
    })(SvgIcon);
  }
});

// node_modules/@material-ui/core/esm/SvgIcon/index.js
var init_SvgIcon2 = __esm({
  "node_modules/@material-ui/core/esm/SvgIcon/index.js"() {
    init_SvgIcon();
  }
});

// node_modules/@material-ui/core/esm/utils/createSvgIcon.js
function createSvgIcon(path, displayName) {
  var Component = function Component2(props, ref) {
    return import_react.default.createElement(SvgIcon_default, _extends({
      ref
    }, props), path);
  };
  if (true) {
    Component.displayName = "".concat(displayName, "Icon");
  }
  Component.muiName = SvgIcon_default.muiName;
  return import_react.default.memo(import_react.default.forwardRef(Component));
}
var import_react;
var init_createSvgIcon = __esm({
  "node_modules/@material-ui/core/esm/utils/createSvgIcon.js"() {
    init_extends();
    import_react = __toESM(require_react());
    init_SvgIcon2();
  }
});

export {
  debounce,
  init_debounce,
  isMuiElement,
  init_isMuiElement,
  ownerDocument,
  init_ownerDocument,
  ownerWindow,
  init_ownerWindow,
  createChainedFunction,
  init_createChainedFunction,
  useControlled,
  init_useControlled,
  createSvgIcon,
  init_createSvgIcon
};
//# sourceMappingURL=chunk-ZIFBGZ75.js.map
